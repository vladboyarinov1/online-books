<?
session_start();
?>
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="style.css">
    <title>exam</title>
</head>

<body>
    <div class="wrapper">
        <header class="header">
            <a class="header__logo__a" href="/index.php">
                <h2 class="header__logo__a__name">Online books</h2>
            </a>
            <input class="header__search profile" placeholder="Введите название товара" type="search">
            <img class="header__search__img profile" src="/img/login.png" alt="">
            <a href="profile.php" class="header__login__link">
                <img class="header__login__link__img" src="/img/account_avatar_face_man_people_profile_user_icon_123197.svg" alt="">
            </a>
        </header>
        <section class="description">
            <img class="description__img" src="/img/bntu.png" alt="">
            <h2 class="description__title">1.Способы адресации. Регистровая адресация</h2>
            <p class="description__txt">Способом, или режимом адресации, называют процедуру
                нахождения операнда для выполняемой команды.
                Если команда использует два операнда, то для каждого из них должен быть задан способ
                адресации, причем режимы адресации первого и второго операнда могут как совпадать, так и
                различаться. Операнды команды могут находиться в разных местах: непосредственно в составе
                кода команды, в каком-либо регистре, в ячейке памяти; в последнем случае существует
                несколько возможностей указания его адреса. Строго говоря, способы адресации являются
                элементом архитектуры процессора, отражая заложенные в нем возможности поиска операндов.
                С другой стороны, различные способы адресации определенным образом обозначаются в языке
                ассемблера и в этом смысле являются разделом языка.
            </p>
            <p class="description__txt">
                Следует отметить неоднозначность термина "операнд" применительно к программам, написанным
                на языке ассемблера. Для машинной команды операндами являются те данные (в сущности,
                двоичные числа), с которыми она имеет дело. Эти данные могут, как уже отмечалось,
                находиться в регистрах или в памяти. Если же рассматривать команду языка ассемблера,
                то для нее операндами (или, лучше сказать, параметрами) являются те обозначения,
                которые позволяют сначала транслятору, а потом процессору определить местонахождение
                операндов машинной команды. Так, для команды ассемблера
            </p>
            <p5 class="description__example ex">mov mem,AX</p5>
            <p class="description__txt">
                в качестве операндов используется обозначение ячейки памяти mem,
                a также обозначение регистра АХ.
            </p>
            <h2 class="description__title">Регистровая адресация</h2>
            <p class="description__txt">
                Регистровая адресация является частным случаем укороченной.
                Применяется, когда промежуточные результаты хранятся в одном из рабочих регистров
                центрального процессора. Поскольку регистров значительно меньше чем ячеек памяти,
                то небольшого адресного поля может хватить для адресации.
            </p>
            <p class="description__example ex">inc СН ;Плюс 1 к содержимому СН</p>
            <p class="description__example">push DS ;DS сохраняется в стеке</p>
            <p class="description__example">xchg ВХ,ВР ;ВХ и ВР обмениваются содержимым</p>
            <p class="description__example">mov ES,АХ ;Содержимое АХ пересылается в ES</p>
            <h2 class="description__title">2.Реализация обмена в режиме ПДП с "Захватом памяти"</h2>
            <p class="description__txt">Одним из способов обмена данными с ВУ является обмен в режиме
                прямого доступа к памяти (ПДП). В этом режиме обмен данными между ВУ и основной памятью
                микроЭВМ происходит без участия процессора. Обменом в режиме ПДП управляет не программа,
                выполняемая процессором, а электронные схемы, внешние по отношению к процессору. Обычно
                схемы, управляющие обменом в режиме ПДП, размещаются или в специальном контроллере,
                который называется контроллером прямого доступа к памяти, или в контроллере самого ВУ.
            </p>
            <p class="description__txt">
                Обмен данными в режиме ПДП позволяет использовать в микроЭВМ быстродействующие внешние
                запоминающие устройства, такие, например, как накопители на жестких магнитных дисках,
                поскольку ПДП может обеспечить время обмена одним байтом данных между памятью и ВЗУ,
                равное циклу обращения к памяти.
            </p>
            <p class="description__txt">
                Для реализации режима прямого доступа к памяти необходимо обеспечить непосредственную связь
                контроллера ПДП и памяти микроЭВМ. Для этой цели можно было бы использовать специально
                выделенные шины адреса и данных, связывающие контроллер ПДП с основной памятью.
                Но такое решение нельзя признать оптимальным, так как это приведет к значительному
                усложнению микроЭВМ в целом, особенно при подключении нескольких ВЗУ.
                В целях сокращения количества линий в шинах микроЭВМ контроллер ПДП подключается
                к памяти посредством шин адреса и данных системного интерфейса. При этом возникает
                проблема совместного использования шин системного интерфейса процессором и контроллером
                ПДП. Можно выделить два основных способа ее решения: реализация обмена в режиме ПДП
                с "захватом цикла" и в режиме ПДП с блокировкой процессора.
            </p>
            <p class="description__txt">
                Существуют две разновидности прямого доступа к памяти с "захватом цикла".
                Наиболее простой способ организации ПДП состоит в том, что для обмена используются те
                машинные циклы процессора, в которых он не обменивается данными с памятью.
                В такие циклы контроллер ПДП может обмениваться данными с памятью, не мешая работе
                процессора. Однако возникает необходимость выделения таких циклов, чтобы не произошло
                временного перекрытия обмена ПДП с операциями обмена, инициируемыми процессором.
                В некоторых процессорах формируется специальный управляющий сигнал, указывающий циклы,
                в которых процессор не обращается к системному интерфейсу. При использовании других
                процессоров для выделения таких циклов необходимо применение в контроллерах ПДП
                специальных селектирующих схем, что усложняет их конструкцию. Применение рассмотренного
                способа организации ПДП не снижает производительности микроЭВМ, но при этом обмен в
                режиме ПДП возможен только в случайные моменты времени одиночными байтами или словами.
            </p>
            <p class="description__txt">
                Более распространенным является ПДП с "захватом цикла" и принудительным отключением
                процессора от шин системного интерфейса. Для реализации такого режима ПДП системный
                интерфейс микроЭВМ дополняется двумя линиями для передачи управляющих сигналов "Требование
                прямого доступа к памяти" (ТПДП) и "Предоставление прямого доступа к памяти" (ППДП).
            </p>
        </section>
        <footer class="footer">
            <div class="footer__left">
                <a class="footer__logo__a" href="">
                    <h2 class="footer__logo__a__name">Online books</h2>
                </a>
                <h3 class="footer__address">Республика Беларусь, город Минск, Проспект Независимости 55</h3>
            </div>
            <div class="footer__books">
                <ul>
                    <li>
                        <h5 class="footer__books__title" href="">Книги</h5>
                    </li>
                    <li><a class="footer__books__item" href="fiction.html">Художественная литература</a></li>
                    <li><a class="footer__books__item" href="unfiction.html">Нехудожественная литература</a></li>
                    <li><a class="footer__books__item" href="business.html">Бизнес-литература</a></li>
                    <li><a class="footer__books__item" href="psychology.html">Психология</a></li>
                </ul>
            </div>
            <div class="footer__help">
                <ul>
                    <li>
                        <h5 class="footer__help__title" href="">Помощь</h5>
                    </li>
                    <li><a class="footer__help__item" href="">Оплата</a></li>
                    <li><a class="footer__help__item" href="">Доставка</a></li>
                    <li><a class="footer__help__item" href="">Оплата</a></li>
                    <li><a class="footer__help__item" href="">Контакты</a></li>
                </ul>
            </div>
            <div class="footer__copyright">
                <h4 class="footer__copyright__developer">Разработал Бояринов Владислав</h4>
                <h4 class="footer__copyright__copy">Все Права Защищены 2021&copy </h4>
                <div class="footer__sprait">
                    <a href=""><img class="footer__sprait__item" src="/img/Instagram.svg" alt=""></a>
                    <a href=""><img class="footer__sprait__item" src="img/Facebook.svg" alt=""></a>
                    <a href=""><img class="footer__sprait__item" src="/img/Twitter.svg" alt=""></a>
                    <a href=""><img class="footer__sprait__item" src="/img/Youtube.svg" alt=""></a>
                </div>
            </div>
        </footer>
    </div>
</body>

</html>